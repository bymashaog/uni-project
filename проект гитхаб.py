{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fcf325d6-7578-45cf-a31c-f77f53e59dac",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "from collections import Counter\n",
    "\n",
    "class TFIDF:\n",
    "    stopwords = {'и', 'в', 'на', 'с', 'по', 'для', 'от', 'из', 'о', 'к', 'за', 'не'}\n",
    "\n",
    "    def __init__(self, documents):\n",
    "        self.documents = documents\n",
    "        self.doc_count = len(documents)\n",
    "\n",
    "    def get_tf(self, word, doc_number):\n",
    "        words = self.documents[doc_number].split()\n",
    "        word_count = words.count(word)\n",
    "        return word_count / len(words)\n",
    "\n",
    "    def get_idf(self, word):\n",
    "        doc_count_with_word = sum(1 for doc in self.documents if word in doc.split())\n",
    "        return math.log(self.doc_count / (doc_count_with_word + 1))\n",
    "\n",
    "    def get_tf_idf(self, word, doc_number, ignore_stopwords=True):\n",
    "        if ignore_stopwords and word in TFIDF.stopwords:\n",
    "            return 0\n",
    "        tf = self.get_tf(word, doc_number)\n",
    "        idf = self.get_idf(word)\n",
    "        return tf * idf\n",
    "\n",
    "documents = [\n",
    "    \"Кошка сидит на окне\",\n",
    "    \"Собака лает на прохожих\",\n",
    "    \"Птицы поют утром\",\n",
    "    \"На столе стоит ваза с цветами\",\n",
    "    \"Машина едет по дороге\",\n",
    "    \"Дети играют на площадке\"\n",
    "]\n",
    "\n",
    "tfidf = TFIDF(documents)\n",
    "\n",
    "word = 'на'\n",
    "doc_number = 0\n",
    "\n",
    "print(f\"TF: {tfidf.get_tf(word, doc_number)}\")\n",
    "print(f\"IDF: {tfidf.get_idf(word)}\")\n",
    "print(f\"TF-IDF: {tfidf.get_tf_idf(word, doc_number)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6c181fa-ca8c-4b48-8e38-0827dbafd750",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "from collections import Counter\n",
    "import re\n",
    "url = 'https://www.gutenberg.org/files/4300/4300-h/4300-h.htm'\n",
    "response = requests.get(url)\n",
    "response.encoding = 'utf-8'\n",
    "soup = BeautifulSoup(response.text, 'html.parser')\n",
    "chapter_text = ''\n",
    "for tag in soup.find_all(['h1', 'h2', 'p']):\n",
    "    if tag.name == 'h2' and re.search(r'chapter 1', tag.text, re.IGNORECASE):\n",
    "        for sibling in tag.find_next_siblings():\n",
    "            if sibling.name == 'h2': \n",
    "                break\n",
    "            if sibling.name == 'p':\n",
    "                chapter_text += sibling.get_text(separator=' ', strip=True) + ' '\n",
    "text_lower = chapter_text.lower()\n",
    "words = re.findall(r'\\b\\w+\\b', text_lower)\n",
    "word_freq = Counter(words)\n",
    "def find_in_context(text, target_word, left_len, right_len, cut_length=False):\n",
    "    result = []\n",
    "    text = text.lower()\n",
    "    sentences = re.split(r'(?<=[.!?]) +', text)\n",
    "    with open('word_contexts.txt', 'w', encoding='utf-8') as f:\n",
    "        for sentence in sentences:\n",
    "            tokens = re.findall(r'\\b\\w+\\b', sentence)\n",
    "            for i, word in enumerate(tokens):\n",
    "                if word == target_word:\n",
    "                    left_context = tokens[max(0, i - left_len):i]\n",
    "                    right_context = tokens[i + 1:i + 1 + right_len]\n",
    "                    context = ' '.join(left_context + [word] + right_context)\n",
    "                    f.write(context + '\\n')\n",
    "                    print(context)\n",
    "                    result.append(context)\n",
    "    return result\n",
    "find_in_context(chapter_text, 'buck', 3, 3, cut_length=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
